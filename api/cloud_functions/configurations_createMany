exports = async function(items){
  const serviceName = "mongodb-atlas";
  const dbName = "HrDataDev";

  const db = context.services.get(serviceName).db(dbName);
  const motorsDescCollection = db.collection("calibMotorsDescription");
  const animationsDescCollection = db.collection("calibAnimationsDescription");
  const motorsConfigCollection = db.collection("calibMotorsConfiguration");
  const animationsConfigCollection = db.collection("calibAnimationsConfiguration");
  
  let motorsConfigAssemblies;
  let animationsConfigAssemblies;

  // Find configurations
  try {
    motorsConfigAssemblies = (await motorsConfigCollection.find({}).toArray()).map(({assembly}) => assembly);
    animationsConfigAssemblies = (await animationsConfigCollection.find({}).toArray()).map(({assembly}) => assembly);
  } catch(err) {
    console.log("Error occurred while getting configuration assemblies:", err.message);
    return { error: err.message };
  }

  // Check that assemblies are not repeated
  const assemblies = Object.keys(items)
  const existingAssemblies = [];

  if((new Set(assemblies)).size !== assemblies.length) {
    return { error: 'Some assemblies are repeated in the provided object' };
  }

  assemblies.forEach((assembly) => {
    if(motorsConfigAssemblies.includes(assembly) || animationsConfigAssemblies.includes(assembly)) {
      existingAssemblies.push(assembly)
    }
  })
  
  if(existingAssemblies.length) {
    return { error: 'The following assemblies already have a configuration: ' + existingAssemblies.join(', ') };
  }
  
  // Build configurations with default values
  const motorsConfigs = [];
  const animationsConfigs = [];

  const promises = Object.entries(items).map(async ([assembly, descriptionName]) => {
    let motorsDescription;
    let animationsDescription;

    try {
      motorsDescription = await motorsDescCollection.findOne({name: descriptionName});
      animationsDescription = await animationsDescCollection.findOne({name: descriptionName});
    } catch(err) {
      console.log("Error occurred while getting descriptions:", err.message);
      return { error: err.message };
    }

    const motors = []
    motorsDescription.motors?.forEach((m) => {
      if (m.defaultShow) {
        motors.push({
          descId: m.id,
          motorName: m.name,
          neutralPositionValue: m.neutralPosition.defaultValue,
          maxPositionValue: m.maxPosition.defaultValue,
          minPositionValue: m.minPosition.defaultValue,
          sort_no: m.sort_no,
          motor_id: m.motor_id,
          hardware: m.hardware,
          transmission: m.transmission,
          speed: m.speed,
          acceleration: m.acceleration,
          torque: m.torque,
          topic: m.topic,
          mapping: m.mapping
        })
      }
    })
    motorsConfigs.push({
      descriptionName,
      assembly,
      motors
    })

    const animations = animationsDescription.animations?.map((a) => ({
      animationId: a.id,
      animationName: a.name,
      animationType: a.type,
      motions: a.motions?.map((m) => ({
        motionId: m.id,
        motionName: m.name,
        value: m.defaultValue
      })) || []
    })) || []
    animationsConfigs.push({
      descriptionName,
      assembly,
      animations
    })
  });

  const results = await Promise.all(promises);
  const error = results.find((result) => result?.error)
  if (error) {
    return error
  }

  // Save new configurations
  try {
    await motorsConfigCollection.insertMany(motorsConfigs);
    await animationsConfigCollection.insertMany(animationsConfigs);
  } catch(err) {
    console.log("Error occurred while creating configurations:", err.message);
    return { error: err.message };
  }

  return
};