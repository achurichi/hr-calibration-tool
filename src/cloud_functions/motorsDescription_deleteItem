exports = async function (descriptionName, motorId) {
  const serviceName = "mongodb-atlas";
  const dbName = "HrDataDev";

  const db = context.services.get(serviceName).db(dbName);
  const collection = db.collection("calibMotorsDescription");

  let description;

  // Find description
  try {
    description = await collection.findOne({ name: descriptionName });
  } catch (err) {
    console.log("Error occurred while getting description:", err.message);
    return { error: err.message };
  }

  let motors = description.motors || [];
  motors = motors.filter(({ id }) => id !== motorId);

  // Save updated description
  try {
    await collection.updateOne(
      { name: descriptionName },
      { ...description, motors },
    );
  } catch (err) {
    console.log("Error occurred while deleting motor:", err.message);
    return { error: err.message };
  }

  // Delete old images
  try {
    const motor = description.motors.find(({ id }) => id === motorId);
    const neutralPositionImages = motor?.neutralPosition?.images || [];
    if (neutralPositionImages.length) {
      context.functions.execute("images_deleteOld", neutralPositionImages, []);
    }
    const minPositionImages = motor?.minPosition?.images || [];
    if (minPositionImages.length) {
      context.functions.execute("images_deleteOld", minPositionImages, []);
    }
    const maxPositionImages = motor?.maxPosition?.images || [];
    if (maxPositionImages.length) {
      context.functions.execute("images_deleteOld", maxPositionImages, []);
    }
  } catch (err) {
    console.log("Error occurred while deleting old images:", err.message);
  }

  // Get updated description
  try {
    description = await collection.findOne({ name: descriptionName });
  } catch (err) {
    console.log("Error occurred while getting description:", err.message);
    return { error: err.message };
  }

  return { result: description };
};
